from test_helpers.common_functions import *


def test_create_shorterner(shorterner_service, created_shortcode):
    """
    1. Create new shortcode, generated by service
    2. Validate status code is success.
    3. Validate response body as expected.
    4. Validate code length is 6.
    4. Validate with /stats API that code was saved in DB as expected
    """
    r = shorterner_service.get_shorterner_stats(created_shortcode)
    assert r.status_code == HTTPStatus.OK, f"status code for get shorterner is {r.status_code}"
    shorterner_service.assert_shorterner_stats(r.json())


def test_create_shorterner_with_specific_code(shorterner_service, created_shortcode_with_specific_code):
    """
    1. Create new shorterner with specific code.
    2. Validate status code is success.
    3. Validate response body as expected.
    4. Validate with /stats API that code was saved in DB as expected.
    """
    r = shorterner_service.get_shorterner_stats(created_shortcode_with_specific_code)
    assert r.status_code == HTTPStatus.OK, f"status code for get shorterner is {r.status_code}"
    shorterner_service.assert_shorterner_stats(r.json())


@pytest.mark.skip("Unskip when bug will be resolved: service is not deleting shortcodes")
def test_delete_shorterner(shorterner_service, created_shortcode):
    """
    1. Create new shortcode
    2. Delete it.
    3. Validate status code is success.
    4. Validate with /stats API 404 status.
    """
    r = shorterner_service.delete_shortcode(created_shortcode)
    assert r.status_code == HTTPStatus.OK, f"status code for delete shorterner is {r.status_code}"
    r = shorterner_service.get_shorterner_stats(created_shortcode)
    assert r.status_code == HTTPStatus.NOT_FOUND, f"status code for get non-existing shorterner is {r.status_code}"


def test_redirect_counter(shorterner_service, created_shortcode):
    """
    1. Create new shortcode
    2. Trigger redirect API
    3. Get stat for code.
    4. Validate redirectCount == 1.
    """
    r = shorterner_service.redirect(created_shortcode)
    assert r.status_code == HTTPStatus.TEMPORARY_REDIRECT, f"status code for redirect is {r.status_code}"
    r = shorterner_service.get_shorterner_stats(created_shortcode)
    assert r.status_code == HTTPStatus.OK, f"status code for get shorterner stat is {r.status_code}"
    assert r.json()['redirectCount'] == 1
